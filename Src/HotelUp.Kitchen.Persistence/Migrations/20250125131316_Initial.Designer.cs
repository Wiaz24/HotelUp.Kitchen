// <auto-generated />
using System;
using System.Collections.Generic;
using HotelUp.Kitchen.Persistence.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelUp.Kitchen.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250125131316_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kitchen")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DishFoodTask", b =>
                {
                    b.Property<string>("DishesName")
                        .HasColumnType("text");

                    b.Property<Guid>("FoodTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("DishesName", "FoodTaskId");

                    b.HasIndex("FoodTaskId");

                    b.ToTable("DishFoodTask", "kitchen");
                });

            modelBuilder.Entity("DishMenu", b =>
                {
                    b.Property<string>("DishesName")
                        .HasColumnType("text");

                    b.Property<DateOnly>("MenuServingDate")
                        .HasColumnType("date");

                    b.HasKey("DishesName", "MenuServingDate");

                    b.HasIndex("MenuServingDate");

                    b.ToTable("DishMenu", "kitchen");
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.Cook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Cooks", "kitchen");
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.Dish", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("ImageUrl", "HotelUp.Kitchen.Persistence.Entities.Dish.ImageUrl#ImageUrl", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "HotelUp.Kitchen.Persistence.Entities.Dish.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Name");

                    b.ToTable("Dishes", "kitchen");
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.FoodTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.ToTable("FoodTasks", "kitchen");
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.Menu", b =>
                {
                    b.Property<DateOnly>("ServingDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CookId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("ServingDate");

                    b.HasIndex("CookId");

                    b.ToTable("Menus", "kitchen");
                });

            modelBuilder.Entity("DishFoodTask", b =>
                {
                    b.HasOne("HotelUp.Kitchen.Persistence.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelUp.Kitchen.Persistence.Entities.FoodTask", null)
                        .WithMany()
                        .HasForeignKey("FoodTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DishMenu", b =>
                {
                    b.HasOne("HotelUp.Kitchen.Persistence.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelUp.Kitchen.Persistence.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuServingDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.FoodTask", b =>
                {
                    b.HasOne("HotelUp.Kitchen.Persistence.Entities.Cook", null)
                        .WithMany("FoodTasks")
                        .HasForeignKey("CookId");

                    b.OwnsOne("HotelUp.Kitchen.Persistence.Entities.Reservation", "Reservation", b1 =>
                        {
                            b1.Property<Guid>("FoodTaskId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<List<int>>("RoomNumbers")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("FoodTaskId");

                            b1.HasIndex("ReservationId");

                            b1.ToTable("FoodTasks", "kitchen");

                            b1.WithOwner()
                                .HasForeignKey("FoodTaskId");
                        });

                    b.Navigation("Reservation")
                        .IsRequired();
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.Menu", b =>
                {
                    b.HasOne("HotelUp.Kitchen.Persistence.Entities.Cook", null)
                        .WithMany("Menus")
                        .HasForeignKey("CookId");
                });

            modelBuilder.Entity("HotelUp.Kitchen.Persistence.Entities.Cook", b =>
                {
                    b.Navigation("FoodTasks");

                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
